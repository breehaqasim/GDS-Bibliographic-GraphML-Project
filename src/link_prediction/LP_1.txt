MATCH (a1:Author)-[:WROTE]->(p:Paper)<-[:WROTE]-(a2:Author),
      (p)-[:HAS_TOPIC]->(t:Topic)
WHERE a1.name < a2.name AND p.year IS NOT NULL
WITH a1, a2, p.year AS year, COLLECT(DISTINCT t.name) AS topics
MERGE (a1)-[e:CO_AUTHORED {year: year}]-(a2)
SET e.topics = topics,
    e.sharedTopics = SIZE(topics)


CALL gds.graph.project(
  'predictionGraph',
  ['Author'],
  [
    {
      CO_AUTHORED: {
        orientation: 'UNDIRECTED',
        properties: ['sharedTopics', 'year']
      }
    }
  ]
);
// Create pipeline
CALL gds.beta.pipeline.linkPrediction.create('lp-pipeline');

//FastRP node embeddings
CALL gds.beta.pipeline.linkPrediction.addNodeProperty('lp-pipeline', 'fastRP', {
  mutateProperty: 'embedding',
  embeddingDimension: 56,
  randomSeed: 42
});
//node degree
CALL gds.beta.pipeline.linkPrediction.addNodeProperty('lp-pipeline', 'degree', {
  mutateProperty: 'degree'
});

//normalize the degree property
CALL gds.beta.pipeline.linkPrediction.addNodeProperty('lp-pipeline', 'alpha.scaleProperties', {
  nodeProperties: ['degree'],
  mutateProperty: 'scaledDegree',
  scaler: 'MinMax'
});
//HADAMARD product of node embeddings
CALL gds.beta.pipeline.linkPrediction.addFeature('lp-pipeline', 'HADAMARD', {
  nodeProperties: ['embedding']
});
//split config
CALL gds.beta.pipeline.linkPrediction.configureSplit('lp-pipeline', {
  trainFraction: 0.7,
  testFraction: 0.2,
  validationFolds: 3
});
//logistic regression
CALL gds.beta.pipeline.linkPrediction.addLogisticRegression('lp-pipeline');
//train
CALL gds.beta.pipeline.linkPrediction.train('predictionGraph', {
    pipeline: 'lp-pipeline',
    modelName: 'lp-pipeline-model-v1',
    targetRelationshipType: 'CO_AUTHORED', 
    metrics: ['AUCPR', 'OUT_OF_BAG_ERROR'], 
    randomSeed: 42
}) YIELD modelInfo, modelSelectionStats
RETURN
    modelInfo.bestParameters AS winningModel,
    modelInfo.metrics.AUCPR.train.avg AS avgTrainScore,
    modelInfo.metrics.AUCPR.outerTrain AS outerTrainScore,
    modelInfo.metrics.AUCPR.test AS testScore,
    [candidate IN modelSelectionStats.modelCandidates | candidate.metrics.AUCPR.validation.avg] AS validationScores
//predict
call gds.beta.pipeline.linkPrediction.predict.stream("predictionGraph",{
    modelName: "lp-pipeline-model-v1",
    writeRelationshipType: "PREDICTED_CO_AUTHORS",
    topN: 10
}) YIELD node1, node2, probability
WITH gds.util.asNode(node1) as n1, gds.util.asNode(node2) as n2, probability
return n1, n2, probability


